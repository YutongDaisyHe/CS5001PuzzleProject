'''
CS5001
Fall 2021
Final Project -- design

Yutong He
'''

1. Files (helper functions and classes)
For this final project, I created the helper.py, the turtle_collections.py, a Coordinates class, a Players class, an ImageInfo class, and the driver function with main in puzzle_game.py. The leaderboard.txt and 5001_puzzle.err are created and updated through file writing or appending in helper functions. Coordinates class helps obtain coordinates of the clicked position. All players' information obtained from user input through a pop-up window are stored in an object of Players class named players. Players' actual number of moves are updated through get_info() method of the class. The information to be written to leaderboard.txt can be accessed through output_leaders() method of the players object. The image is a class object of ImageInfo storing information of the selected puzzle set, obtaining positions of each puzzle pieces, and swapping directories of pieces. The design of ImageInfo class is the core of the puzzle swapping function. 

2. Introduction of the Functions
Inside the helper.py, I set a couple of constant variables for the game screen set-up and import a set of turtle objects from turtle_collections.py for setting up the screen and drawing different items in the later game. The functions used to set up game boards and prepare for the game include: set_splash_screen(), prompt_input(), draw_puz_board(), draw_menu_board(), draw_leader_board(), draw_gameboard(), and show_thumbnail(). Among them, set_splash_screen(), prompt_input(), and draw_gameboard() are called in the driver function puzzle_game.py. When the game starts or the new puzzle are loaded, the puzzle pieces are placed in the puzzle board first, and get_image_name(), read_puz_file(), set_puzzle_grid(), place_puzzles(), load_puzzles() are called. Load_puzzles() are called in the driver function. The first puzzle to be loaded are automatically set as "mario.puz" in shuffled status according to the video demonstration. When the game actually starts, wn.onclick() function is called in driver function main(). I used a lambda function to pass x, y coordinates back to the higher-ordered function wn.onlick() while being able to pass in two extra variables image and players (class objects) into the click() function. click(), click_menu_buttons(), check_click_pos(), get_pos(), swap(), check_result(), erase_puzzles() are functions called during the game to swap the puzzle pieces or selecting buttons in the menu board. 

3. Trade-off Decisions
One of the biggest challenges for designing the puzzle game is how to set, store, use, and track the coordinates of each puzzle piece in the game board. In order to access the data about puzzle pieces' positions and directory information, I created ImageInfo class which takes multiple attributes including position. Position is a dictionary of each piece's position, using integers as keys which indicate the position of pieces from left to right, top to bottom (from 1 to total number of pieces) in a 2 * 2, 3 * 3ï¼Œ or 4 * 4 grid. Values are lists of coordinate tuples and strings of directory of image. It takes plenty of memory space to store this information for each called puzzle set. However, it is quiet efficient for tracking location of each click puzzle pieces. Another trade-off decision I made is to keep some turtles visible for showing puzzle images. The turtles blink as the game goes on due to the switch between hideturtle and showturtle. I tried the stamp() method to hide the turtle cursor while showing images carried by turtles. However, the memory space got to use up quickly after several rounds of game as increasing number of turtles' "footprints" were stored through stamp(). Therefore, I gave up using stamp() to save the memory space. 

